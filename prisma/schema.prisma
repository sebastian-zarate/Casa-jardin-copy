// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nacionalidad {
  id         Int         @id @default(autoincrement())
  nombre     String
  provincias Provincia[] // Relación uno a muchos con Provincia
}

model Provincia {
  id             Int          @id @default(autoincrement())
  nombre         String
  nacionalidad   Nacionalidad @relation(fields: [nacionalidadId], references: [id])
  nacionalidadId Int
  localidades    Localidad[] // Relación uno a muchos con Localidad
}

model Localidad {
  id          Int         @id @default(autoincrement())
  nombre      String
  provincia   Provincia   @relation(fields: [provinciaId], references: [id])
  provinciaId Int
  direcciones Direccion[] // Relación uno a muchos con Direccion
}

model Direccion {
  id            Int             @id @default(autoincrement())
  calle         String
  numero        Int
  localidad     Localidad       @relation(fields: [localidadId], references: [id])
  localidadId   Int

  // Relaciones
  alumnos       Alumno[] // Relación de uno a muchos con Alumno
  responsable Responsable[] // Relación de uno a muchos con Responsable
}

model Rol {
  id            Int             @id @default(autoincrement())
  nombre        String
  Alumno        Alumno[]
  Profesional   Profesional[]
  Administrador Administrador[]
}

model Administrador {
  id          Int       @id @default(autoincrement())
  nombre      String
  email       String    @unique
  password    String
  rolId       Int
  rol         Rol       @relation(fields: [rolId], references: [id])
}

model Profesional {
  id           Int       @id @default(autoincrement())
  nombre       String
  apellido     String
  especialidad String
  email        String    @unique
  password     String    //le saque el unique ya que puede haber profesionales con la misma contraseña
  telefono     String    
  imagen      String?
 
  prof_cur Profesional_Curso[]
  rolId    Int
  rol      Rol                 @relation(fields: [rolId], references: [id])
}

model Profesional_Curso {
  id      Int   @id @default(autoincrement())
  curso   Curso @relation(fields: [cursoId], references: [id])
  cursoId Int

  profesional   Profesional @relation(fields: [profesionalId], references: [id])
  profesionalId Int
}

model Curso {
  id          Int                 @id @default(autoincrement())
  nombre      String
  descripcion String
  imagen      String?

  edadMinima  Int
  edadMaxima  Int
  fechaInicio DateTime
  fechaFin    DateTime


  // Relaciones
  prof_cur    Profesional_Curso[]
  cronograma  Cronograma[]
  alum_cur    Alumno_Curso[]
  cursoSolicitud CursoSolicitud[]
}
model Alumno {
  id       Int    @id @default(autoincrement())
  nombre   String
  apellido String
  dni      Int?   @unique
  telefono String?   //le saque el unique por que daba problemas

  direccionId Int?  
  direccion   Direccion? @relation(fields: [direccionId], references: [id]) // Relación de uno a muchos
  email       String     @unique
  password    String
  rolId       Int
  rol         Rol        @relation(fields: [rolId], references: [id])
  mayoriaEdad Boolean?
  fechaNacimiento DateTime?

  // Relaciones
  alum_cur        Alumno_Curso[]
  solcitudMayores SolicitudMayores[]
  solcitudMenores SolicitudMenores[]
  responsable     Responsable?
}

model Alumno_Curso {
  id       Int    @id @default(autoincrement())
  alumno   Alumno @relation(fields: [alumnoId], references: [id])
  alumnoId Int

  curso   Curso @relation(fields: [cursoId], references: [id])
  cursoId Int

  // Relaciones
  pagos Pagos[]
}

model Pagos {
  id       Int          @id @default(autoincrement())
  alum_cur Alumno_Curso @relation(fields: [Id], references: [id])
  Id       Int          @unique
}

model Cronograma {
  id        Int                 @id @default(autoincrement())
  curso     Curso               @relation(fields: [cursoId], references: [id])
  cursoId   Int
  aula      Aula                @relation(fields: [aulaId], references: [id])
  aulaId    Int
  
  // Relaciones
  diasHoras CronogramaDiaHora[] // Relación con la tabla intermedia para días y horas
}

model Aula {
  id          Int          @id @default(autoincrement())
  nombre      String

  // Relaciones
  cronogramas Cronograma[] // Relación uno a muchos con Cronograma
}

model Dia {
  id                  Int                 @id @default(autoincrement())
  nombre              String // Ejemplo: Lunes, Martes, Miércoles
  // Relaciones
  cronogramaDiasHoras CronogramaDiaHora[] // Relación con la tabla intermedia
}

model CronogramaDiaHora {
  id           Int        @id @default(autoincrement())
  cronograma   Cronograma @relation(fields: [cronogramaId], references: [id])
  cronogramaId Int
  dia          Dia        @relation(fields: [diaId], references: [id])
  diaId        Int
  hora         Hora       @relation(fields: [horaId], references: [id])
  horaId       Int

  @@unique([cronogramaId, diaId, horaId]) // Evitar duplicados
}

model Hora {
  id                  Int                 @id @default(autoincrement())
  hora_inicio         String
  // Relaciones
  cronogramaDiasHoras CronogramaDiaHora[] // Relación con la tabla intermedia
}

//region Solicitudes
model Solicitud {
  id Int @id @default(autoincrement())
  leida Boolean @default(false)
  // Relaciones
  solicitudMayores SolicitudMayores? // Relación de uno a uno con SolicitudMayores
  solicitudMenores SolicitudMenores? // Relación de uno a uno con SolicitudMenores
  cursoSolicitud   CursoSolicitud[] // Relación de uno a muchos con CursoSolicitud
}
model CursoSolicitud {
  id Int @id @default(autoincrement())
  solicitud Solicitud @relation(fields: [solicitudId], references: [id])
  solicitudId Int
  curso Curso @relation(fields: [cursoId], references: [id])
  cursoId Int 
  //true = aceptado, false = rechazado 
  //(para que el alumno pueda saber si de esa solicitud en que cursos fue aceptado)
  estado Boolean @default(false) 
}
model SolicitudMayores {
  id          Int       @id @default(autoincrement())
  solicitud   Solicitud @relation(fields: [solicitudId], references: [id])
  solicitudId Int       @unique
  alumno      Alumno    @relation(fields: [alumnoId], references: [id])
  alumnoId    Int
  //firmas
  firmaUsoImagenes String?
  observacionesUsoImagenes String?
  firmaReglamento String?

  // Relaciones
  
}

model SolicitudMenores {
  id          Int       @id @default(autoincrement())
  solicitud   Solicitud @relation(fields: [solicitudId], references: [id])
  solicitudId Int       @unique
  alumno      Alumno    @relation(fields: [alumnoId], references: [id])
  alumnoId    Int
  enfermedad String
  alergia   String
  medicacion String
  terapia    String
  especialista String
  motivoAsistencia String
  //firmas
  firmaUsoImagenes String?
  observacionesUsoImagenes String?
  firmaSalidas String?
  observacionesSalidas String?
  firmaReglamento String?
}

model Responsable {
  id Int @id @default(autoincrement())
  alumno Alumno @relation(fields: [alumnoId], references: [id])
  alumnoId Int @unique  // Relación de uno a uno con Alumno
  nombre String
  apellido String
  dni Int @unique
  telefono String //tambien aca da problemas el unique
  email String @unique
  direccionId Int?  
  direccion   Direccion? @relation(fields: [direccionId], references: [id]) // Relación de uno a muchos
}